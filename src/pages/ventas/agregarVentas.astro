---
import Layout from '../../layouts/Layout.astro';

const fechaVenezuela = new Intl.DateTimeFormat('es-VE', {
        timeZone: 'America/Caracas',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit'
    }).format(new Date());

// Convertir de formato DD/MM/YYYY a YYYY-MM-DD
const [dia, mes, ano] = fechaVenezuela.split('/');
const fechaCompleta = `${ano}-${mes}-${dia}`;

---

<Layout>
    <h1>Agregar Venta</h1>

    <div class="btn-add_container">
        <a class="btn-add" href="/ventas">Regresar</a>
    </div>

    <section class="form-container">
        <form>
            <div>
                <input type="date" name="fecha" id="fecha" value={fechaCompleta}/>
            </div>
            
            <div id="productos-container" class="modulo-agregar-producto">
                <input type="text" id="busquedaProductos" placeholder="Buscar producto por nombre o código" />
                <select name="producto" id="productoSelect"></select>

                <label for="cantidad">Cantidad:</label>
                <input type="number" min="1" id="cantidad" placeholder="Ingrese la cantidad"/>

                <label for="precio">Precio por Unidad:</label>
                <input type="text" id="precio"/>
                <span id="precioPesos"></span>

                <div class="btns-container">
                    <button id="agregarProducto">Agregar</button>
                </div>
            </div>
        </form>
    </section>

    <table>
        <thead id="headerTablaProductos" style="opacity: 0;">
            <tr>
                <th>Producto</th>
                <th>Precio por Unidad</th>
                <th>Cantidad Seleccionada</th>
                <th>Subtotal</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody id="listaProductos">
        </tbody>
    </table> 

    <div class="btns-container">
        <button id="btnConfirmacion" disabled style="display: none;">Presione para Concretar la Venta</button>
    </div>  

            
    <section class="form-container" id="moduloDatosCompletar" style="display: none;">
        <form>
            <input type="text" id="busquedaClientes" placeholder="Buscar cliente por cédula" />
            <div class="select-container password-container">
                <select name="cliente" id="cliente"></select>
                <span class="btn-cliente" id="abrirMenuClienteNuevo">+</span>
            </div>

            <div id="moduloAgregarClienteNuevo" class="modulo-agregar-cliente" style="display: none;">
                <span>Registrar cliente no existente: </span>
                <input type="text" name="nombre" id="nombre" placeholder="Nombre y Apellido" />
                <input type="text" name="telefono" id="telefono" placeholder="Número de Teléfono" />
                <input type="number" name="cedula" id="cedula" placeholder="Cédula del Cliente" min="0"/>
                <button id="btnAgregarClienteNuevo">Agregar</button>
            </div>

            <div class="select-container" id="tipoPago-container">
                <select name="tipoPago" id="tipoPago">
                    <option value="">Selecciona el Tipo de Pago</option>
                    <option value="contado">De Contado</option>
                    <option value="credito">A Crédito</option>
                </select>
            </div>

            <p id="totalDeVenta"></p>

            <div class="btns-container">
                <button id="btnFinalizar" type="button">Confirmar Venta</button>
                <button id="imprimirFacturacion" disabled style="opacity: 0;" type="button">Imprimir Facturación</button>
            </div>
        </form>
    </section>
        
    <div id="mensaje"></div>
</Layout>

<style>

    .btn-cliente {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 30px;
        width: 35px;
        border-radius: 50%;
        cursor: pointer;
        font-weight: bold;
        color: #fff;

        &:hover {
            background-color: #4b4b8a;
        }
    }

    .modulo-agregar-cliente, .modulo-agregar-producto {
        display: flex;
        flex-direction: column;
        padding: 1rem;
        gap: .5rem;
        background-color: #ffffff;
        border-radius: 5px;
        border: 1px solid #e5e7eb;
    }

    .btns-container {
        display: flex;
        justify-content: space-between;
        margin-top: 1rem;
    }

    #btnConfirmacion, #imprimirFacturacion, #btnFinalizar {
        display: block;
        margin: 1rem auto;
        background-color: #1f2937;
        color: #fff;
        border-radius: 5px;
        padding: .35rem .75rem;
        text-align: center;
        font-size: .9rem;
        font-weight: 600;
        border: none;
        outline: none;

        &:hover {
            background: #4b4b8a;
            cursor: pointer;
        }
    }

    #mensaje {
        margin-top: 1rem;
    }

    #totalDeVenta {
        margin-top: 1rem;
        font-weight: bold;
        text-align: center;
    }

    #precioPesos{
        margin-top: .25rem;
        font-weight: bold;
        font-size: .8rem;
    }

</style>

<script type="module" is:inline>

import { mostrarError, mostrarMensaje } from '/mensajes.js';

    const btnAbrirMenuClienteNuevo = document.getElementById("abrirMenuClienteNuevo");
    const btnAgregarClienteNuevo = document.getElementById("btnAgregarClienteNuevo");
    const btnImprimirFacturacion = document.getElementById("imprimirFacturacion");

    // Eventos
    document.addEventListener("DOMContentLoaded", () => {
        rellenarSelectClientes();
        rellenarSelectProductos();
    }); // cargar clientes y productos al iniciar

    async function rellenarSelectClientes() {
        const selectClientes = document.getElementById("cliente");
        const busqueda = document.getElementById("busquedaClientes");

        let clientesListados = [];

        try {
            const response = await fetch("/api/clientes");
            const data = await response.json();

            clientesListados = data;

            // Función para renderizar opciones
            const renderOpciones = (clientes) => {
                selectClientes.innerHTML = ""; // Limpiar opciones previas

                // Opción inicial vacía
                const defaultOption = document.createElement("option");
                defaultOption.value = "";
                defaultOption.textContent = "Selecciona un cliente";
                defaultOption.disabled = true;
                defaultOption.selected = true;
                selectClientes.appendChild(defaultOption);

                // Mensaje si no hay registros para esa busqueda
                if (clientes.length === 0) {
                    const noResultsOption = document.createElement("option");
                    noResultsOption.value = "";
                    noResultsOption.textContent = "— Sin coincidencias para la búsqueda —";
                    noResultsOption.disabled = true;
                    selectClientes.appendChild(noResultsOption);
                    return;
                }

                clientes.forEach(cliente => {
                    const option = document.createElement("option");
                    option.value = cliente.id;
                    option.textContent = `${cliente.nombre.toUpperCase()} - ${cliente.cedula}`;
                    selectClientes.appendChild(option);
                });
            };

            // Render inicial
            renderOpciones(clientesListados);

            // Listener de búsqueda
            busqueda.addEventListener("input", () => {
                const filtro = busqueda.value.trim();

                if (!filtro) {
                    renderOpciones(clientesListados);
                    return;
                }

                const clientesFiltrados = clientesListados.filter(cliente =>
                    String(cliente.cedula || "").includes(filtro)
                );

                renderOpciones(clientesFiltrados);
            });

        } catch (error) {
            console.error("Error al cargar los clientes:", error);
        }
    }

    async function rellenarSelectProductos() {

        const busqueda = document.getElementById("busquedaProductos");
        const productoSelect = document.getElementById("productoSelect");

        let productosListados = [];

        try {

            const response = await fetch("/api/productos");
            const data = await response.json();

            productosListados = data;

            const renderOpciones = (productos) => {
                productoSelect.innerHTML = ""; // Limpiar opciones previas

                // Opción inicial vacía
                const defaultOption = document.createElement("option");
                defaultOption.value = "";
                defaultOption.textContent = "Selecciona un producto";
                defaultOption.disabled = true;
                defaultOption.selected = true;
                productoSelect.appendChild(defaultOption);

                // Mensaje si no hay registros para esa busqueda
                if (productos.length === 0) {
                    const noResultsOption = document.createElement("option");
                    noResultsOption.value = "";
                    noResultsOption.textContent = "— Sin coincidencias para la búsqueda —";
                    noResultsOption.disabled = true;
                    productoSelect.appendChild(noResultsOption);
                    return;
                }

                productos.forEach(producto => {
                    const option = document.createElement("option");
                    option.value = producto.id;
                    option.textContent = `${producto.codigo.toUpperCase()} - ${producto.nombre} - ${producto.stock}u. - ${producto.venta}USD`;
                    productoSelect.appendChild(option);
                });
            };

            // Render inicial
            renderOpciones(productosListados);

            // Listener de búsqueda
            busqueda.addEventListener("input", () => {
                const filtro = busqueda.value.trim().toLowerCase();

                if (!filtro) {
                    renderOpciones(productosListados);
                    return;
                }

                const productosFiltrados = productosListados.filter(producto => {
                    const nombre = String(producto.nombre || "").toLowerCase();
                    const codigo = String(producto.codigo || "").toLowerCase();
                    return nombre.includes(filtro) || codigo.includes(filtro);
                });

                renderOpciones(productosFiltrados);
            });


        } catch (error) {
            console.error("Error al cargar los productos:", error);
        }
    }

    // Seleccionar productos y mostrar input de precio
    const productoSelect = document.getElementById("productoSelect");
    const precioInput = document.getElementById("precio");

    productoSelect.addEventListener("change", async () => {
        const productoId = productoSelect.value;

        if (!productoId) {
            precioInput.value = "";
            return;
        }

        try {
            const response = await fetch(`/api/productos/${productoId}`);

            if (!response.ok) {
                console.error("Error al obtener el producto:", response.status);
                precioInput.value = "";
                return;
            }

            const producto = await response.json();

            if (typeof producto.venta === "number") {
                precioInput.value = producto.venta.toFixed(2);
            } else {
                precioInput.value = "";
            }

        } catch (error) {
            console.error("Error de red o parsing:", error);
            precioInput.value = "";
        }
    });

    // Agregar productos a la tabla y mostrar
    const btnagregarProducto = document.getElementById("agregarProducto");
    let productosSeleccionados = [];

    btnagregarProducto.addEventListener("click", async (e) => {
            
        e.preventDefault();

        const productoId = productoSelect.value;
        const cantidadInput = document.getElementById("cantidad");
        const cantidad = parseInt(cantidadInput.value);
        const precio = parseFloat(precioInput.value);

        try {
            const response = await fetch(`/api/productos/${productoId}`);
            if (!response.ok) {
                throw new Error('Error al obtener el producto: ' + response.status);
            }
            const producto = await response.json();

            if (!producto || !producto.stock) {
                alert('Producto no encontrado o sin stock disponible.');
                return;
            }

            // Validaciones
            if (cantidad === "" || isNaN(cantidad) || Number(cantidad) <= 0) {
                alert("Ingresa una cantidad válida mayor a cero.");
                return;
            }

            if (precio === "" || isNaN(precio) || Number(precio) <= 0) {
                alert("El precio del producto no es válido.");
                return;
            }

            // Validacion si la cantidad escogida es mayor al stock
            if (Number(cantidad) > producto.stock) {
                alert(`Cantidad insuficiente en stock. Stock disponible: ${producto.stock}`);
                return;
            }

            // Obtener tasa de cambio
            const tasaFetch = await fetch('/api/tasa');
            const dataTasa = await tasaFetch.json();
            const tasa = Number(dataTasa.valor);

            // Theader
            const theader = document.getElementById("headerTablaProductos");

            // Btn Confirmacion
            const btnConfirmacion = document.getElementById("btnConfirmacion");

            // Agregar producto a la tabla
            const tablaProductos = document.getElementById("listaProductos");
            const fila = document.createElement("tr");
            fila.innerHTML = `
                                <td>
                                    ${producto.nombre.toUpperCase()}
                                    <br />
                                    ${producto.codigo}
                                </td>
                                <td>
                                    ${precio.toFixed(2)} USD
                                    <br />
                                    ${Math.ceil(precio * tasa)} COP
                                </td>
                                <td>${cantidad} U.</td>
                                <td>
                                    ${(cantidad * precio).toFixed(2)} USD
                                    <br />
                                    ${Math.ceil(cantidad * precio * tasa)} COP
                                </td>
                            `;

            // Botones de acciones
            const tdAcciones = document.createElement('td');
            tdAcciones.classList.add('acciones');

            // Boton de eliminar
            const btnEliminar = document.createElement('button');
            btnEliminar.classList.add('btn-eliminar');
            btnEliminar.textContent = 'DEL';
            btnEliminar.addEventListener('click', () => {

                // Eliminar la fila de la tabla
                fila.remove();

                // Eliminar el producto del array
                productosSeleccionados = productosSeleccionados.filter(p => p.codigo !== producto.codigo);
                
                if(tablaProductos.innerHTML.trim() === "") {
                    theader.style.opacity = 0;
                    btnConfirmacion.style.display = "none";
                    btnConfirmacion.disabled = true;
                } else {
                    theader.style.opacity = 1;
                    btnConfirmacion.style.display = "inline-block";
                    btnConfirmacion.disabled = false;
                }
            });

            tdAcciones.appendChild(btnEliminar);
            fila.appendChild(tdAcciones);
            tablaProductos.appendChild(fila);

            // Actualizar visibilidad del theader
            if(tablaProductos.innerHTML.trim() === "") {
                theader.style.opacity = 0;
                btnConfirmacion.style.display = "none";
                btnConfirmacion.disabled = true;
            } else {
                theader.style.opacity = 1;
                btnConfirmacion.style.display = "inline-block";
                btnConfirmacion.disabled = false;
            }

            // Reiniciar los campos y el select
            productoSelect.value = "";
            cantidadInput.value = "";
            precioInput.value = "";

            //Agregar al array de productos seleccionados
            productosSeleccionados.push({
                nombre: producto.nombre,
                codigo: producto.codigo,
                precio: precio,
                cantidad: cantidad
            });

        } catch (error) {
            console.error("Error al obtener el producto:", error);
            alert('Error al obtener el producto. Por favor, inténtalo de nuevo.');
            return;
        }
    });

    // Boton para concretar la venta que abre el módulo de clientes y tipo de pago
    const btnConfirmacion = document.getElementById("btnConfirmacion");

    let totalDeVenta = 0;

    btnConfirmacion.addEventListener("click", async () => {
        
        // Abrir modulo de clientes y tipo de pago
        const moduloDatosCompletar = document.getElementById("moduloDatosCompletar");
        moduloDatosCompletar.style.display = "flex";

        // Bloquear el boton anterior
        btnConfirmacion.disabled = true;
        btnConfirmacion.textContent = "Procesando...";

        // Obtener tasa de cambio
        const tasaFetch = await fetch('/api/tasa');
        const dataTasa = await tasaFetch.json();
        const tasa = Number(dataTasa.valor);

        // Calcular el total de la venta aqui mismo
        const total = productosSeleccionados.map(p => p.precio * p.cantidad).reduce((a, b) => a + b, 0);
        const totalTexto = document.getElementById("totalDeVenta");
        totalTexto.textContent = `Total: ${total.toFixed(2)} USD o ${Math.ceil(total * tasa)} COP`;
        totalDeVenta = total;

    });

    btnAbrirMenuClienteNuevo.addEventListener("click", (e) => {
        e.preventDefault();
        const moduloAgregarCliente = document.getElementById("moduloAgregarClienteNuevo");

        moduloAgregarCliente.style.display = 
            moduloAgregarCliente.style.display === "none" ? "flex" : "none";
        btnAbrirMenuClienteNuevo.textContent = 
            moduloAgregarCliente.style.display === "flex" ? "-" : "+";
    }); // abrir el modulo de cliente nuevo

    btnAgregarClienteNuevo.addEventListener("click", agregarClienteNuevo);

    async function agregarClienteNuevo(event) {

        event.preventDefault();

        const nombre = document.getElementById('nombre').value;
        const telefono = document.getElementById('telefono').value;
        const cedulaText = document.getElementById('cedula').value;

        // Validar campos vacios
        if (nombre === '' || telefono === '' || cedulaText === '') {
            mostrarError('Todos los campos son obligatorios.');
            return;
        }

        // Validar formato de teléfono
        const telefonoRegex = /^\d+$/; 
        if (!telefonoRegex.test(telefono)) {
            mostrarError('El número de teléfono debe contener solo números.');
            return;
        }

        // Validar cedula
        const cedulaRegex = /^[1-9]\d*$/;
        if (!cedulaRegex.test(cedulaText)) {
            mostrarError("La cédula debe ser un número entero positivo mayor a cero.");
            return;
        }

        // Parsear cedula
        const cedula = parseInt(cedulaText);

        // Enviar datos al servidor
        const response = await fetch("/api/clientes", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ nombre, telefono, cedula })
        });

        // Verificar si la respuesta es exitosa
        if (!response.ok) {
            if (response.status === 409) {
                const mensaje = await response.text();
                mostrarError(mensaje);
            } else {
                mostrarError('Error al agregar cliente: ' + response.status);
            }
            return;
        }

        const data = await response.json();
        const clienteAgregado = data.cliente[0];
        
        // Agregar el nuevo cliente al select
        const selectClientes = document.getElementById("cliente");
        const option = document.createElement("option");
        option.value = clienteAgregado.id;
        option.textContent = `${clienteAgregado.nombre.toUpperCase()} - ${clienteAgregado.cedula}`;
        selectClientes.appendChild(option);
        option.selected = true; // Seleccionar el nuevo cliente

        // cerrar el módulo de agregar cliente y limpiar campos
        document.getElementById('nombre').value = '';
        document.getElementById('telefono').value = '';
        document.getElementById('cedula').value = '';
        btnAbrirMenuClienteNuevo.textContent = "+";
        const moduloAgregarCliente = document.getElementById("moduloAgregarClienteNuevo");
        moduloAgregarCliente.style.display = "none";

        mostrarMensaje('Cliente agregado exitosamente.');
    }

    // Enviar datos al servidor y concretar venta
    const btnFinalizar = document.getElementById("btnFinalizar");

    btnFinalizar.addEventListener("click", async e => {

        e.preventDefault();

        // Traer informacion necesaria
        const fecha = document.getElementById('fecha').value;
        const tipoPago = document.getElementById('tipoPago').value;
        const clienteId = document.getElementById('cliente').value;

        // Validaciones
        if (!fecha || !tipoPago || !clienteId) {
            mostrarError("Todos los campos son obligatorios.");
            return;
        }

        if(fecha === '' || tipoPago === '' || clienteId === '') {
            mostrarError("Todos los campos son obligatorios.");
            return;
        }

        if (productosSeleccionados.length === 0) {
            mostrarError("No hay productos seleccionados para la venta.");
            return;
        }

        if (isNaN(totalDeVenta) || totalDeVenta <= 0) {
            mostrarError("El total de la venta no es válido.");
            return;
        }

        // Crear venta y se guarda
        try  {

            const response = await fetch("/api/ventas", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    fecha,
                    tipoPago,
                    clienteId,
                    totalDeVenta
                })
            });

            if (!response.ok) {
                throw new Error("Error al crear la venta");
            }

            const data = await response.json();

            // Recuperamos el id
            const ventaId = data.ventaId;

            // Agregar los productos a detalle
            for (const producto of productosSeleccionados) {
                const { codigo, nombre, precio, cantidad } = producto;

                const esDecimalPositivo = /^\d+(\.\d+)?$/;
                const esEnteroPositivo = /^\d+$/;

                const cantidadValida = esEnteroPositivo.test(cantidad) && parseInt(cantidad) > 0;
                const precioUnitarioValido = esDecimalPositivo.test(precio) && parseFloat(precio) >= 0;

                if (!codigo || !nombre || !precioUnitarioValido || !cantidadValida) {
                    mostrarError("Faltan datos válidos del producto");
                    continue; // Salta al siguiente producto sin romper el flujo
                }

                try {
                    const responseDetalles = await fetch("/api/detalleVentas", {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            ventaId,
                            codigo,
                            nombre,
                            precio,
                            cantidad
                        })
                    });

                    if (!responseDetalles.ok) {
                        throw new Error("Error al guardar detalle");
                    }

                } catch (error) {
                    console.error("Error en detalle:", error);
                    mostrarError(`Error al guardar producto ${codigo}`);
                }
            }

            // mostrar mensaje de exito, bloquear btnFinalizar y mostrar btnImprimirFacturacion
            mostrarMensaje('Venta finalizada correctamente. Puede imprimir el comprobante.');

            setTimeout(() => {
                const btnImpresion = document.getElementById("imprimirFacturacion");
                btnImpresion.style.opacity = "1";
                btnImpresion.disabled = false;
                btnFinalizar.style.opacity = "0";
                btnFinalizar.disabled = true;
            }, 1000);

        } catch (error) {
            console.error("Error al crear la venta:", error);
            mostrarError("Error al crear la venta. Por favor, inténtalo de nuevo.");
            return;
        }

    });

    btnImprimirFacturacion.addEventListener("click", async () => {

        // Quitar boton de completar venta
        const btnFinalizar = document.getElementById("btnConfirmacion");
        btnFinalizar.style.opacity = "0";
        btnFinalizar.disabled = true;

        const clienteDatos = { id: '', nombre: '', cedula: '', telefono: '' };
        const clienteSelect = document.getElementById("cliente").value;

        try {
            const response = await fetch(`/api/clientes/${clienteSelect}`);
            if (!response.ok) throw new Error('Error al obtener los datos del cliente');
            const cliente = await response.json();
            clienteDatos.id = cliente.id;
            clienteDatos.nombre = cliente.nombre;
            clienteDatos.cedula = cliente.cedula;
            clienteDatos.telefono = cliente.telefono;
        } catch (error) {
            console.error(error);
        }

        const fecha = document.getElementById('fecha').value;
        const tipoPago = document.getElementById('tipoPago').value;
        const totalDeVenta = document.getElementById("totalDeVenta").textContent;
        const tbodyProductos = document.getElementById("listaProductos");

        const filas = Array.from(tbodyProductos.querySelectorAll("tr"));
        const contenidoFilas = filas.map(fila => {
            const celdas = fila.querySelectorAll("td");
            return `
                <tr>
                    <td>${celdas[0]?.textContent}</td>
                    <td>${celdas[1]?.textContent}</td>
                    <td>${celdas[2]?.textContent}</td>
                    <td>${celdas[3]?.textContent}</td>
                </tr>
            `;
        }).join("");

        const ventana = window.open('', '', 'width=600,height=850');

        ventana.document.write(`
            <!DOCTYPE html>
            <html>
                <head>
                    <title>Nota de Entrega</title>
                    <style>
                        @media print {
                            @page {
                                size: 5.5in 8.5in;
                                margin: 0.5in;
                            }
                            body {
                                font-size: 11pt;
                            }
                        }

                        body {
                            font-family: Arial, sans-serif;
                            margin: 20px;
                            font-size: 12px;
                        }

                        h1, h3{
                            margin: 0;
                            padding: 2px 0;
                            text-align: center;
                        }

                        table {
                            width: 100%;
                            border-collapse: collapse;
                            margin-top: 1rem;
                            margin-bottom: 1rem;
                        }

                        th, td {
                            border: 1px solid #000;
                            padding: 6px;
                            text-align: left;
                            font-size: 11px;
                        }

                        thead {
                            background: #eee;
                        }

                        p {
                            margin: 4px 0;
                        }
                    </style>
                </head>
                <body>
                    <h3>EMPRENDIMIENTO</h3>
                    <h1>DOUGLAS SÁNCHEZ 5</h1>
                    <h3>Rif. J-506718936 / 0424-720.17.82</h3>
                    <h4>SERVICIO TÉCNICO DE AIRES ACONDICIONADOS Y REFRIGERACIÓN</h4>
                    <h2>NOTA DE ENTREGA</h2>
                    <p><strong>Fecha:</strong> ${fecha}</p>
                    <p><strong>Cliente:</strong> ${clienteDatos.nombre.toUpperCase()} - C.I. ${clienteDatos.cedula} - ${clienteDatos.telefono}</p>
                    <p><strong>Tipo de Pago:</strong> ${tipoPago}</p>

                    <table>
                        <thead>
                            <tr>
                                <th>Producto</th>
                                <th>Precio por Unidad</th>
                                <th>Cantidad</th>
                                <th>Subtotal</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${contenidoFilas}
                        </tbody>
                    </table>

                    <p><strong>Total de la Venta:</strong> ${totalDeVenta}</p>
                    <p style="text-align:center;">Gracias por su compra. ¡Vuelva pronto!</p>
                </body>
            </html>
        `);

        ventana.document.close();
        ventana.print();

        // Redirecction a la página de ventas después de imprimir
        setTimeout(() => {
            window.location.href = '/ventas';
        }, 1000); // Esperar 1 segundo antes de redirigir
    });
</script>