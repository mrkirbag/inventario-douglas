---
import Layout from '../../layouts/Layout.astro';

const fechaHoy = new Date();
const ano = fechaHoy.getFullYear();
const mes = String(fechaHoy.getMonth() + 1).padStart(2, '0'); 
const dia = String(fechaHoy.getDate()).padStart(2, '0');
let fechaCompleta = `${ano}-${mes}-${dia}`;

---

<Layout>
    <h1>Agregar Venta</h1>

    <div class="btn-add_container">
        <a class="btn-add" href="/ventas">Regresar</a>
    </div>

    <section class="form-container">
        <form id="formulario">
            <div>
                <input type="date" name="fecha" id="fecha" value={fechaCompleta}/>
            </div>

            <div class="select-container password-container">
                <select name="cliente" id="cliente">
                    <option value="">Selecciona un Cliente</option>
                </select>
                <span class="btn-cliente" id="abrirMenuClienteNuevo">+</span>
            </div>

            <div id="moduloAgregarClienteNuevo" class="modulo-agregar-cliente" style="display: none;">
                <span>Registrar cliente no existente: </span>
                <input type="text" name="nombre" id="nombre" placeholder="Nombre y Apellido" />
                <input type="text" name="telefono" id="telefono" placeholder="Número de Teléfono" />
                <input type="number" name="cedula" id="cedula" placeholder="Cédula del Cliente" min="0"/>
                <button id="btnAgregarClienteNuevo">Agregar</button>
            </div>

            <div class="select-container">
                <select name="tipoPago" id="tipoPago">
                    <option value="">Selecciona el Tipo de Pago</option>
                    <option value="contado">De Contado</option>
                    <option value="credito">A Crédito</option>
                </select>
            </div>
            
            <button id="abrirModuloProductos">+ Seleccionar Productos</button>
            
            <div id="productos-container" class="modulo-agregar-producto" style="display: none;">
                <select name="producto" id="productoSelect">
                    <option value="">Selecciona un Producto</option>
                </select>

                <input type="number" min="1" id="cantidad" placeholder="Ingrese la cantidad"/>
                <div class="btns-container">
                    <button id="agregarProducto">Agregar</button>
                    <button id="cancelarVenta">Cancelar Venta</button>
                </div>
            </div>
        </form>
            <div id="mensaje"></div>
    </section>

    <table>
        <thead id="headerTablaProductos" style="opacity: 0;">
            <tr>
                <th>Producto</th>
                <th>Precio por Unidad</th>
                <th>Cantidad Seleccionada</th>
                <th>Subtotal</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody id="listaProductos">
        </tbody>
    </table> 

    <p id="totalDeVenta"></p>
    <div class="btns-container">
        <button id="btnConfirmacion" style="opacity: 0;" disabled>Completar Venta</button>
        <button id="imprimirFacturacion" style="opacity: 0;" disabled>Imprimir Nota de Entrega</button>
    </div>   

    <div id="mensaje"></div>

</Layout>

<style>

    .btn-cliente {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 30px;
        width: 35px;
        border-radius: 50%;
        cursor: pointer;
        font-weight: bold;
        color: #fff;

        &:hover {
            background-color: #4b4b8a;
        }
    }

    .modulo-agregar-cliente, .modulo-agregar-producto {
        display: flex;
        flex-direction: column;
        padding: 1rem;
        gap: .5rem;
        background-color: #ffffff;
        border-radius: 5px;
        border: 1px solid #e5e7eb;
    }

    .btns-container {
        display: flex;
        justify-content: space-between;
        margin-top: 1rem;
    }

    #btnConfirmacion, #imprimirFacturacion {
        display: block;
        margin: 1rem auto;
        background-color: #1f2937;
        color: #fff;
        border-radius: 5px;
        padding: .35rem .75rem;
        text-align: center;
        font-size: .9rem;
        font-weight: 600;
        border: none;
        outline: none;

        &:hover {
            background: #4b4b8a;
            cursor: pointer;
        }
    }

    #mensaje {
        margin-top: 1rem;
    }

    #totalDeVenta {
        margin-top: 1rem;
        font-weight: bold;
        text-align: center;
    }

</style>

<script type="module" is:inline>

import { mostrarError, mostrarMensaje } from '/mensajes.js';

    const btnAbrirMenuClienteNuevo = document.getElementById("abrirMenuClienteNuevo");
    const btnAgregarClienteNuevo = document.getElementById("btnAgregarClienteNuevo");
    const abrirModuloProductos = document.getElementById("abrirModuloProductos");
    const btnImprimirFacturacion = document.getElementById("imprimirFacturacion");

    // Eventos
    document.addEventListener("DOMContentLoaded", () => {
        rellenarSelectClientes();
        rellenarSelectProductos();
    }); // cargar clientes y productos al iniciar

    btnAbrirMenuClienteNuevo.addEventListener("click", (e) => {
        e.preventDefault();
        const moduloAgregarCliente = document.getElementById("moduloAgregarClienteNuevo");

        moduloAgregarCliente.style.display = 
            moduloAgregarCliente.style.display === "none" ? "flex" : "none";
        btnAbrirMenuClienteNuevo.textContent = 
            moduloAgregarCliente.style.display === "flex" ? "-" : "+";
    }); // abrir el modulo de cliente nuevo

    btnAgregarClienteNuevo.addEventListener("click", agregarClienteNuevo);

    abrirModuloProductos.addEventListener("click", (e) => {
        e.preventDefault();

        const fecha = document.getElementById('fecha').value;
        const clienteId = document.getElementById('cliente').value;
        const tipoPago = document.getElementById('tipoPago').value;

        // Validar campos vacios
        if (fecha === '' || clienteId === '' || tipoPago === '') {
            alert('Debes rellenar los campos anteriores antes de seleccionar productos.');
            return;
        }

        guardarVenta();
        const productosContainer = document.getElementById("productos-container");
        productosContainer.style.display = 
            productosContainer.style.display === "none" ? "flex" : "none";
        if (productosContainer.style.display === "flex") {
            abrirModuloProductos.style.display = "none"; 
        } 
    }); // abrir el modulo de productos

    btnImprimirFacturacion.addEventListener("click", async () => {

        // Quitar boton de completar venta
        const btnConfirmacion = document.getElementById("btnConfirmacion");
        btnConfirmacion.style.opacity = "0";
        btnConfirmacion.disabled = true;

        const clienteDatos = { id: '', nombre: '', cedula: '' };
        const clienteSelect = document.getElementById("cliente").value;

        try {
            const response = await fetch(`/api/clientes/${clienteSelect}`);
            if (!response.ok) throw new Error('Error al obtener los datos del cliente');
            const cliente = await response.json();
            clienteDatos.id = cliente.id;
            clienteDatos.nombre = cliente.nombre;
            clienteDatos.cedula = cliente.cedula;
        } catch (error) {
            console.error(error);
        }

        const fecha = document.getElementById('fecha').value;
        const tipoPago = document.getElementById('tipoPago').value;
        const totalDeVenta = document.getElementById("totalDeVenta").textContent;
        const tbodyProductos = document.getElementById("listaProductos");

        const filas = Array.from(tbodyProductos.querySelectorAll("tr"));
        const contenidoFilas = filas.map(fila => {
            const celdas = fila.querySelectorAll("td");
            return `
                <tr>
                    <td>${celdas[0]?.textContent}</td>
                    <td>${celdas[1]?.textContent}</td>
                    <td>${celdas[2]?.textContent}</td>
                    <td>${celdas[3]?.textContent}</td>
                </tr>
            `;
        }).join("");

        const ventana = window.open('', '', 'width=600,height=850');

        ventana.document.write(`
            <!DOCTYPE html>
            <html>
                <head>
                    <title>Factura Media Carta</title>
                    <style>
                        @media print {
                            @page {
                                size: 5.5in 8.5in;
                                margin: 0.5in;
                            }
                            body {
                                font-size: 11pt;
                            }
                        }

                        body {
                            font-family: Arial, sans-serif;
                            margin: 20px;
                            font-size: 12px;
                        }

                        h1, h2, h3, h4 {
                            margin: 0;
                            padding: 2px 0;
                            text-align: center;
                        }

                        table {
                            width: 100%;
                            border-collapse: collapse;
                            margin-top: 1rem;
                            margin-bottom: 1rem;
                        }

                        th, td {
                            border: 1px solid #000;
                            padding: 6px;
                            text-align: left;
                            font-size: 11px;
                        }

                        thead {
                            background: #eee;
                        }

                        p {
                            margin: 4px 0;
                        }
                    </style>
                </head>
                <body>
                    <h3>EMPRENDIMIENTO</h3>
                    <h1>DOUGLAS SÁNCHEZ 5</h1>
                    <h3>Rif. J-506718936 / 0424-720.17.82</h3>
                    <h4>SERVICIO TÉCNICO DE AIRES ACONDICIONADOS Y REFRIGERACIÓN</h4>
                    <hr />
                    <h2>Factura de Venta</h2>
                    <p><strong>Fecha:</strong> ${fecha}</p>
                    <p><strong>Cliente:</strong> ${clienteDatos.nombre.toUpperCase()} - C.I. ${clienteDatos.cedula}</p>
                    <p><strong>Tipo de Pago:</strong> ${tipoPago}</p>

                    <table>
                        <thead>
                            <tr>
                                <th>Producto</th>
                                <th>Precio por Unidad</th>
                                <th>Cantidad</th>
                                <th>Subtotal</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${contenidoFilas}
                        </tbody>
                    </table>

                    <p><strong>Total de la Venta:</strong> ${totalDeVenta}</p>
                    <p style="text-align:center;">Gracias por su compra. ¡Vuelva pronto!</p>
                </body>
            </html>
        `);

        ventana.document.close();
        ventana.print();

        // Redirecction a la página de ventas después de imprimir
        setTimeout(() => {
            window.location.href = '/ventas';
        }, 1000); // Esperar 1 segundo antes de redirigir
    });


    //FUNCIONES
    // Función para rellenar el select de clientes existentes
    async function rellenarSelectClientes() {

        const selectClientes = document.getElementById("cliente");

        try {
            const response = await fetch("/api/clientes");
            const data = await response.json();

            // Rellenar select de clientes
            data.forEach(cliente => {
                const option = document.createElement("option");
                option.value = cliente.id;
                option.textContent = `${cliente.nombre.toUpperCase()} - ${cliente.cedula}`;
                selectClientes.appendChild(option);
            });

        } catch (error) {
            console.error("Error al cargar los empleados:", error);
        }
    }

    // Función para rellenar el select de productos existentes
    async function rellenarSelectProductos() {

        const productoSelect = document.getElementById("productoSelect");

        try {
            const response = await fetch("/api/productos");
            const data = await response.json();

            // Rellenar select de clientes
            data.forEach(producto => {
                const option = document.createElement("option");
                option.value = producto.id;
                option.textContent = `${producto.nombre.toUpperCase()} - ${producto.stock}u. - ${producto.venta}USD`;
                productoSelect.appendChild(option);
            });

        } catch (error) {
            console.error("Error al cargar los empleados:", error);
        }
    }

    // Función para agregar un cliente nuevo y mostrarlo en el select
    async function agregarClienteNuevo(event) {

        event.preventDefault();

        const nombre = document.getElementById('nombre').value;
        const telefono = document.getElementById('telefono').value;
        const cedulaText = document.getElementById('cedula').value;

        // Validar campos vacios
        if (nombre === '' || telefono === '' || cedulaText === '') {
            mostrarError('Todos los campos son obligatorios.');
            return;
        }

        // Validar formato de teléfono
        const telefonoRegex = /^\d+$/; 
        if (!telefonoRegex.test(telefono)) {
            mostrarError('El número de teléfono debe contener solo números.');
            return;
        }

        // Validar cedula
        const cedulaRegex = /^[1-9]\d*$/;
        if (!cedulaRegex.test(cedulaText)) {
            mostrarError("La cédula debe ser un número entero positivo mayor a cero.");
            return;
        }

        // Parsear cedula
        const cedula = parseInt(cedulaText);

        // Enviar datos al servidor
        const response = await fetch("/api/clientes", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ nombre, telefono, cedula })
        });

        // Verificar si la respuesta es exitosa
        if (!response.ok) {
            if (response.status === 409) {
                const mensaje = await response.text();
                mostrarError(mensaje);
            } else {
                mostrarError('Error al agregar cliente: ' + response.status);
            }
            return;
        }

        const data = await response.json();
        const clienteAgregado = data.cliente[0];
        
        // Agregar el nuevo cliente al select
        const selectClientes = document.getElementById("cliente");
        const option = document.createElement("option");
        option.value = clienteAgregado.id;
        option.textContent = `${clienteAgregado.nombre.toUpperCase()} - ${clienteAgregado.cedula}`;
        selectClientes.appendChild(option);
        option.selected = true; // Seleccionar el nuevo cliente

        // cerrar el módulo de agregar cliente y limpiar campos
        document.getElementById('nombre').value = '';
        document.getElementById('telefono').value = '';
        document.getElementById('cedula').value = '';
        btnAbrirMenuClienteNuevo.textContent = "+";
        const moduloAgregarCliente = document.getElementById("moduloAgregarClienteNuevo");
        moduloAgregarCliente.style.display = "none";

        mostrarMensaje('Cliente agregado exitosamente.');
    }

    // Función para guardar la venta
    async function guardarVenta() {
        const fecha = document.getElementById('fecha').value;
        const clienteId = document.getElementById('cliente').value;
        const tipoPago = document.getElementById('tipoPago').value;

        //Verificar el estado de la venta
        const estado = 'pendiente'; // Por defecto, la venta inicia como pendiente

        // Validar campos vacios
        if (fecha === '' || clienteId === '' || tipoPago === '') {
            alert('Debes rellenar los campos anteriores antes de seleccionar productos.');
            return;
        }

        // Enviar datos al servidor
        const response = await fetch("/api/ventas", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ fecha, clienteId, estado, tipoPago })
        });

        // Verificar si la respuesta es exitosa
        if (!response.ok) {
            alert('Error al guardar la venta: ' + response.status);
            return;
        }

        const data = await response.json();
        const ventaId = Number(data.ventaId); // id de la venta recién creada

        agregarProductoDetalle(ventaId);
        
    }

    // Función para agregar productos a la venta
    async function agregarProductoDetalle(ventaId) {

        const btnagregarProducto = document.getElementById("agregarProducto");

        btnagregarProducto.addEventListener("click", async (e) => {
            e.preventDefault();

            const productoSelect = document.getElementById("productoSelect");
            const cantidadInput = document.getElementById("cantidad");

            const productoId = productoSelect.value;
            const cantidad = parseInt(cantidadInput.value);

            // Validar campos vacios
            if (productoId === '' || isNaN(cantidad) || cantidad <= 0) {
                alert('Debes seleccionar un producto y una cantidad válida.');
                return;
            }

            // Traemos el producto seleccionado
            const responseStock = await fetch(`/api/productos/${productoId}`);
            if (!responseStock.ok) {
                alert('Error al obtener el producto: ' + responseStock.status);
                return;
            }
            const producto = await responseStock.json();
            const codigo_producto = producto.codigo;
            const nombre_producto = producto.nombre;
            const precio_unitario = producto.venta;

            // Validar que haya stock suficiente
            if (cantidad > producto.stock) {
                alert(`Cantidad insuficiente en stock. Stock disponible: ${producto.stock}`);
                return;
            } else {
                // Enviar datos al servidor
                try {
                    const response = await fetch("/api/detalleVentas", {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ ventaId, codigo_producto, nombre_producto, precio_unitario,  cantidad })
                    });

                    // Verificar si la respuesta es exitosa
                    if (!response.ok) { 
                        alert('Error al agregar el producto a la venta: ' + response.status);
                        return;
                    }

                    productoSelect.value = ''; // Limpiar el select de productos
                    cantidadInput.value = ''; // Limpiar el input de cantidad

                    await mostrarProductosEnTabla(ventaId); // Actualizar la tabla de productos

                } catch (error) {
                    console.error('Error al agregar el producto a la venta:', error);
                    alert('Error al agregar el producto a la venta. Por favor, inténtalo de nuevo.');
                }
            }
        });

        const btnCancelarVenta = document.getElementById("cancelarVenta");
        btnCancelarVenta.addEventListener("click", async (e) => {
            e.preventDefault();
            
            // Cerrar el módulo de productos
            const productosContainer = document.getElementById("productos-container");
            productosContainer.style.display = "none"; 
            abrirModuloProductos.style.display = "block"; 

            // Reiniciar el formulario
            document.getElementById('formulario').reset();

            // Mostrar mensaje de cancelación
            const confirmarCancelacion = confirm("¿Estás seguro de que deseas cancelar la venta?");
            if (!confirmarCancelacion) return;

            // Pasa la venta a estado "cancelado"
            const cancelarResponse = await fetch(`/api/ventas/cancelarVenta`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ ventaId })
            });

            const data = await cancelarResponse.json();
            if (!cancelarResponse.ok) {
                alert('Error al cancelar la venta: ' + data.message);
                return;
            }
            mostrarMensaje(data.message);
        });
    }

    async function mostrarProductosEnTabla(ventaId) {

        const listaProductos = document.getElementById("listaProductos");
        const tablaHeader = document.getElementById("headerTablaProductos");
        const btnConfirmacion = document.getElementById("btnConfirmacion");
        const totalDeVenta = document.getElementById("totalDeVenta");

        listaProductos.innerHTML = ''; // Limpiar la tabla antes de mostrar los productos

        try {

            const response = await fetch(`/api/detalleVentas?ventaId=${ventaId}`);

            if (!response.ok) {
                throw new Error('Error al obtener los productos de la venta: ' + response.status);
            }

            const productos = await response.json();

            // Si no hay resultados, mostrar mensaje
            if(productos.message) {
                mostrarError(productos.message);
                return;
            }

            // Mostrar el header solo si hay productos
            if (productos.length !== 0) {
                tablaHeader.style.opacity = 1;
                btnConfirmacion.disabled = false;
                btnConfirmacion.style.opacity = 1;
            }
            
            // Traer la tasa de cambio
                const responseTasa = await fetch('/api/tasa');
                if (!responseTasa.ok) throw new Error('Error al obtener la tasa de cambio');
                const dataTasa = await responseTasa.json();
                const tasa = Number(dataTasa.valor);

            // Calcular el total de la venta
            let totalVentaUSD = 0;    

            // Mostrar productos en la tabla
            productos.forEach(producto => {

                const pUnitarioPesos =  Math.ceil(tasa * producto.precio_unitario);
                const subtotalPesos =  Math.ceil(tasa * producto.subtotal);
                totalVentaUSD += producto.subtotal;   

                const tr = document.createElement("tr");
                tr.innerHTML = `
                    <td>${producto.nombre_producto.toUpperCase()}</td>

                    <td>
                        ${producto.precio_unitario.toFixed(2)} USD
                        <br />
                        <span style="font-size: .75rem;">${pUnitarioPesos} COP</span>
                    </td>

                    <td>${producto.cantidad}</td>

                    <td>
                        ${(producto.subtotal).toFixed(2)} USD
                        <br />    
                        <span style="font-size: .75rem;">${subtotalPesos} COP</span>
                    </td>
                `;

                // Botones de acciones
                const tdAcciones = document.createElement('td');
                tdAcciones.classList.add('acciones');

                // Boton de eliminar
                const btnEliminar = document.createElement('button');
                btnEliminar.classList.add('btn-eliminar');
                btnEliminar.textContent = 'DEL';

                btnEliminar.onclick = async () => {
                    // Confirmación antes de eliminar
                    const confirmar = confirm(`¿Estás seguro de eliminar al producto ${producto.nombre_producto}?`);
                    if (!confirmar) return;

                    // Enviar solicitud de eliminación al servidor
                    try {
                        const res = await fetch('/api/detalleVentas/', {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ id: producto.id })
                        });

                        mostrarProductosEnTabla(ventaId); // Actualizar la tabla después de eliminar

                    } catch (error) {
                        console.error("Error eliminando producto:", error);
                    }
                };
                tdAcciones.appendChild(btnEliminar);

                tr.appendChild(tdAcciones);
                listaProductos.appendChild(tr);
            });
            // Mostrar el total de la venta
            totalDeVenta.textContent = `
                                            Total de la Venta: ${totalVentaUSD.toFixed(2)} USD.    
                                            ${Math.ceil(tasa * totalVentaUSD)} COP.
                                        `;             
                                        

            btnConfirmacion.onclick = async (e) => {

                e.preventDefault();

                const confirmar = confirm("¿Estás seguro de completar la venta?");
                if (!confirmar) return;

                console.log("Venta a completar:", ventaId, totalVentaUSD);

                // Enviar solicitud para completar la venta
                try {
                    const response = await fetch(`/api/ventas/finalizarVenta`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ ventaId, totalVentaUSD })
                    });

                    if (!response.ok) {
                        throw new Error('Error al completar la venta: ' + response.status);
                    }

                    mostrarMensaje('Venta completada exitosamente.');
                    setTimeout(() => {
                        const btnImpresion = document.getElementById("imprimirFacturacion");
                        btnImpresion.style.opacity = "1";
                        btnImpresion.disabled = false;
                        btnConfirmacion.style.opacity = "0";
                        btnConfirmacion.disabled = true;
                    }, 1000);

                } catch (error) {
                    console.error('Error al completar la venta:', error);
                    mostrarError('Error al completar la venta. Por favor, inténtalo de nuevo.');
                }
            } 

        } catch (error) {
            console.error(error);
            mostrarError('Error al cargar los productos de la venta.');
        }      
    }

</script>